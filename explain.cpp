/*std::vector
Преимущества :

Континуум памяти : std::vector хранит элементы в непрерывном блоке памяти, 
что обеспечивает быстрый доступ по индексу(O(1)).
Компактность : Континууальность памяти делает std::vector более компактным, 
поскольку отсутствуют дополнительные указатели, которые характерны для 
двусвязных списков.

Быстрые операции в конце : Добавление элементов в конец вектора(push_back) 
происходит быстро, хотя может потребоваться увеличение памяти при расширении
(в случае увеличения емкости).

Возможности для оптимизации : Векторы хорошо работают с кэшем процессора, 
что может улучшить производительность при итерациях и других операциях.

Недостатки :
Медленные операции вставки / удаления в середине или в начале : При вставке 
или удалении элементов в начале или середине вектора элементы могут смещаться, 
что приводит к высокой временной сложности(O(n)).
Потенциальное увеличение памяти : При расширении вектор может выделить 
дополнительную память, что может привести к использованию большего объема памяти, чем изначально требуется.*/
	
